"""
Direct the client to resolve this field locally, either from the cache or local resolvers.
"""
directive @client(
  """
  When true, the client will never use the cache for this value. See
  https://www.apollographql.com/docs/react/essentials/local-state/#forcing-resolvers-with-clientalways-true
  """
  always: Boolean
) on FIELD | FRAGMENT_DEFINITION | INLINE_FRAGMENT

"""
Export this locally resolved field as a variable to be used in the remainder of this query. See
https://www.apollographql.com/docs/react/essentials/local-state/#using-client-fields-as-variables
"""
directive @export(
  """The variable name to export this field as."""
  as: String!
) on FIELD

"""
Specify a custom store key for this result. See
https://www.apollographql.com/docs/react/advanced/caching/#the-connection-directive
"""
directive @connection(
  """Specify the store key."""
  key: String!

  """
  An array of query argument names to include in the generated custom store key.
  """
  filter: [String!]
) on FIELD

type CsvStorage {
  file: Upload!
  filename: String!
  id: ID!
  title: String!
}

input CsvStorageInput {
  title: String!
  file: Upload
}

input CsvStorageUpdate {
  title: String!
  id: Int!
}

type Mutation {
  createCsv(
    """Parameters for Upload"""
    input: UploadInput!
  ): UploadPayload
  updateCsv(
    """Parameters for Update"""
    input: UpdateInput!
  ): UpdatePayload
}

type Query {
  csvs: [CsvStorage!]!
}

"""Autogenerated input type of Update"""
input UpdateInput {
  params: CsvStorageUpdate!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of Update"""
type UpdatePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  item: CsvStorage!
}

scalar Upload

"""Autogenerated input type of Upload"""
input UploadInput {
  params: CsvStorageInput!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of Upload"""
type UploadPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  item: CsvStorage!
}
